import { View, Text, Image, StyleSheet,Button, TouchableOpacity  } from "react-native";
import React, { useCallback, useEffect } from "react";
import Colors from "./../../constants/Colors";
import { LinearGradient } from "expo-linear-gradient";
import * as WebBrowser from 'expo-web-browser'
import { useSSO } from '@clerk/clerk-expo'



export default function index() {

  useWarmUpBrowser()

  // Use the `useSSO()` hook to access the `startSSOFlow()` method
  const { startSSOFlow } = useSSO()

  const onPress = useCallback(async () => {
    try {
      // Start the authentication process by calling `startSSOFlow()`
      const { createdSessionId, setActive, signIn, signUp } = await startSSOFlow({
        strategy: 'oauth_google',
      })

      // If sign in was successful, set the active session
      if (createdSessionId) {
        
      } else {
        // If there is no `createdSessionId`,
        // there are missing requirements, such as MFA
        // Use the `signIn` or `signUp` returned from `startSSOFlow`
        // to handle next steps
      }
    } catch (err) {
      // See https://clerk.com/docs/custom-flows/error-handling
      // for more info on error handling
      console.error(JSON.stringify(err, null, 2))
    }
  }, [])
    return (
    <View style={{ backgroundColor: Colors.DARK }}>
      <Image
        source={require("./../../assets/images/Login.jpg")}
        style={{ width: "100%", height: 600 }}
      />
      <View style={styles.loginContainer}>
        <Text
          style={{
            fontSize: 30,
            fontWeight: "bold",
            textAlign: "center",
            color: Colors.LIGHT,
          }}
        >
          Welcome to Bons<Text style={{fontStyle:'italic', color:'#50C878'}}>ai</Text>
        </Text>
        <Text
          style={{
            color: Colors.GRAY,
            textAlign: "center",
            marginTop: 15,
          }}
        >
         Create AI images like never before.
        </Text>

        <TouchableOpacity onPress={onPress} style={styles.buttonContainer}>
          <LinearGradient
            colors={["#0a0f24", "#070d1f", "#03060d"]} // Deep navy to black gradient
            style={styles.button}
          >
            <Text style={styles.buttonText}>Continue</Text>
          </LinearGradient>
        </TouchableOpacity>

        <Text
          style={{
            textAlign: "center",
            marginTop: 20,
            color: Colors.GRAY,
            fontSize: 13,
          }}
        >
          By <Text style={{fontWeight:'bold'}}>Continuing</Text> you agree to sell your soul to me.
        </Text>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  loginContainer: {
    padding: 25,
    marginTop: -20,
    backgroundColor: "white",
    height: 620,
    borderTopLeftRadius: 30,
    borderTopRightRadius: 30,
  },
  buttonContainer: {
    alignItems: "center",
    justifyContent: "center",
    shadowColor: "#50C878", // Space glow effect
    shadowOffset: { width: 0, height: 0 },
    shadowOpacity: 0.8,
    shadowRadius: 10,
  },
  button: {
    width: "100%",
    padding: 20,
    borderRadius: 40,
    marginTop: 20,
    alignItems: "center",
    justifyContent: "center",
  },
  buttonText: {
    textAlign: "center",
    color: "white",
    fontSize: 17,
    fontWeight: "bold",
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 5,
  },
});


export const useWarmUpBrowser = () => {
  useEffect(() => {
    // Preloads the browser for Android devices to reduce authentication load time
    // See: https://docs.expo.dev/guides/authentication/#improving-user-experience
    void WebBrowser.warmUpAsync()
    return () => {
      // Cleanup: closes browser when component unmounts
      void WebBrowser.coolDownAsync()
    }
  }, [])
}

// Handle any pending authentication sessions
WebBrowser.maybeCompleteAuthSession()
